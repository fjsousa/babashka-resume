{:paths ["src/clj"]
 :pods {org.babashka/fswatcher {:version "0.0.3"}}
 :deps {org.babashka/http-server {:mvn/version "0.1.11"}
        org.babashka/cli {:mvn/version "0.2.23"}}
 :tasks

 {:requires ([babashka.cli :as cli])
  :init (def cli-opts (cli/parse-opts *command-line-args* {:coerce {:port :int}}))
  :enter (println (format "Entering: %s - %s %s" (:name (current-task)) (:doc (current-task))
                          (if *command-line-args*
                            (str " With args: " *command-line-args*)
                            "")))

  nrepl
  {:requires ([babashka.fs :as fs]
              [babashka.nrepl.server :as srv])
   :task (do (srv/start-server! {:host "localhost"
                                 :port 1339})
             (spit ".nrepl-port" "1339")
             (-> (Runtime/getRuntime)
                 (.addShutdownHook
                  (Thread. (fn [] (fs/delete ".nrepl-port")))))
             (deref (promise)))}

  serve {:doc "Serve static assets"
         :requires ([babashka.http-server :as server])
         :task (server/exec (merge {:port 1337
                                    :dir "./html/"}
                                   cli-opts))}

  prn {:task (clojure "-X clojure.core/prn" cli-opts)}

  -dev {:depends [serve prn]}

  dev {:task (run '-dev {:parallel true})}

  beautify {:doc "pretty print html document."
            :task (shell "npx js-beautify --type html html/*.html -r -s 2 -d")}

  yaml-to-edn {:doc "builds html/index.html"
               :task (do (shell "bb -m yaml-to-edn")
                         (run 'beautify))}
  watch-css {:doc "produces html/global.css"
             :task (shell "npx tailwindcss -i ./src/css/global.css -o ./html/global.css --watch")}
  watch-build {:requires ([pod.babashka.fswatcher :as fw]
                          [babashka.fs :as fs])
               :doc "Watches clj and yaml files and produces html/index.html."
               :task (do (run 'yaml-to-edn)
                         (println "CTRL-C to quit...")
                         (fw/watch "." (fn [{:keys [type path] :as wtv}]
                                         (println wtv)
                                         (when (or
                                                (= path "./resume.yaml")
                                                (= (fs/extension path) "clj"))

                                           (println path " changed.")
                                           (run 'yaml-to-edn))) {:delay-ms 500})
                         (deref (promise)))}
  -watch-everything {:depends [watch-css watch-build]}
  watch-everything {:task (run '-watch-everything {:parallel true})}}}
